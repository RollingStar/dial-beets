directory: e:\Music\
library: e:\Music\beetslibrary.bib

import:
    copy: no
    move: yes
    write: yes
    timid: no
    languages: en
    quiet: no
    #keep all duplicates and import all of them
    duplicate_action: keep
per_disc_numbering: yes

#some plugins you might find useful:
#edit fromfilename 
#the inline fetchart mbsync chroma
#copyartifactspy3 is the "copyartifacts" plugin sent through Python's python2 -> python3 converter
plugins: the inline fetchart copyartifactspy3 mbsync orig_date web
#note: alb_title requires titlecase, a separate install

#this should disambig. but doesn't work properly. will fix someday
#%if{%right{%aunique{album $alb_orig_year_mm_dd,country label catalognum albumdisambig,},1}, [%aunique{album $alb_orig_year_mm_dd,country label catalognum albumdisambig,}]}

#would be nice to use newlines, tabs, and comments here: https://github.com/beetbox/beets/issues/2147

paths:
    default: >-
        %if{$albumartist,%the{$albumartist} - }%if{$alb_promo_boot,$alb_promo_boot%if{$alb_exotic_type,$, }}%if{$alb_exotic_type,$alb_exotic_type - }%if{%right{%aunique{albumartist albumstatus albumtype,alb_orig_year alb_orig_year_mm alb_orig_year_mm_dd,},1},%aunique{albumartist albumstatus albumtype,alb_orig_year alb_orig_year_mm alb_orig_year_mm_dd,} - ,$alb_orig_year - }$alb_title$i_cust_catalog%if{$alb_subset_bitrate, [$alb_subset_bitrate]}/%if{$i_disc_layer,$i_disc_layer-}$track. $title
        
    albumtype:single: >-
        %if{$albumartist,%the{$albumartist} - }Singles/%if{$alb_promo_boot,$alb_promo_boot - }%if{$year,%aunique{albumartist albumstatus albumtype,alb_orig_year alb_orig_year_mm alb_orig_year_mm_dd country label catalognum albumdisambig} - }%if{$album,$alb_title - ,Non-Album - }$i_cust_catalog%if{$alb_subset_bitrate, [$alb_subset_bitrate] - }%if{$i_disc_layer,$i_disc_layer-}$track. $title
        
    #same as default, just split folders by disc titles if applicable (similarly, don't split by discs numbers if you split by disc titles)
    comp: >-
        %if{$albumartist,%the{$albumartist} - }%if{$alb_promo_boot,$alb_promo_boot%if{$alb_exotic_type,$, }}%if{$alb_exotic_type,$alb_exotic_type - }%if{%right{%aunique{albumartist albumstatus albumtype,alb_orig_year alb_orig_year_mm alb_orig_year_mm_dd country label catalognum albumdisambig,},1},%aunique{albumartist albumstatus albumtype,alb_orig_year alb_orig_year_mm alb_orig_year_mm_dd country label catalognum albumdisambig,} - ,$alb_orig_year - }%if{$disctitle,%if{$i_disc_layer,$i_disc_layer. }$disctitle,$alb_title}$i_cust_catalog%if{$alb_subset_bitrate, [$alb_subset_bitrate]}/%if{$disctitle,,%if{$i_disc_layer,$i_disc_layer-}}$track. $title
        
    #you need both this and the above "comp" to detect all types of compilations. I have no idea why.
    albumtype:compilation: >-
        %if{$albumartist,%the{$albumartist} - }%if{$alb_promo_boot,$alb_promo_boot%if{$alb_exotic_type,$, }}%if{$alb_exotic_type,$alb_exotic_type - }%if{%right{%aunique{albumartist albumstatus albumtype,alb_orig_year alb_orig_year_mm alb_orig_year_mm_dd country label catalognum albumdisambig,},1},%aunique{albumartist albumstatus albumtype,alb_orig_year alb_orig_year_mm alb_orig_year_mm_dd country label catalognum albumdisambig,} - ,$alb_orig_year - }%if{$disctitle,%if{$i_disc_layer,$i_disc_layer. }$disctitle,$alb_title}$i_cust_catalog%if{$alb_subset_bitrate, [$alb_subset_bitrate]}/%if{$disctitle,,%if{$i_disc_layer,$i_disc_layer-}}$track. $title

#maybe pointless. attempt to help with cmd.exe/powershell encoding issues for unicode text
terminal_encoding:
   'utf_8'

match:
    #.1 = 90% similarity required. automatically matches above the threshold.
    #even at the chosen threshold, can be unintuitive and not automatically select the choice that meets the threshold.
    #There is a GitHub issue for this that I can't find.
    strong_rec_thresh: .1
    #see https://beets.readthedocs.io/en/v1.4.3/reference/config.html#preferred
    preferred:
        media: ['CD', 'Digital Media|File', 'Digital Media']
        countries: ['US', 'GB|UK']    
    distance_weights:
        #should help "quiet" matching. If beets is too eager to match incorrectly and ignore missing tracks,
        #then this creates more work for the user later when they manually correct the matches to a release
        #without the tracks, or find the missing tracks.
        missing_tracks: 10
        unmatched_tracks: 10
        #try to force away from vinyl
        #media: 20.0
        #mediums: 20.0
        
musicbrainz:
    #5 (default) is good, but if you have massive boxsets, consider making it lower for a performance boost (untested how much difference this makes)
    #make higher for prolific artists (ex. Beatles) because otherwise, beets may pick the wrong release (especially picking the wrong release from the release group)
    searchlimit: 5
    
#replace only works on paths (shouldn't change any internal tags)
replace:
    #BIG SOLIDUS
    '/': '⧸'
    #29FS BIG REVERSE SOLIDUS
    '\\': ⧵
    #2223: DIVIDES
    '\|': ∣
    #02C2 MODIFIER LETTER LEFT ARROWHEAD
    '<': ˂
    #O2C3 MODIFIER LETTER RIGHT ARROWHEAD
    '>': ˃
    '\s+$': ''
    '^\s+': ''
    #replace : with ։ (lookalike)
    '\:': ։
    #replace " with two single apostrophes ''
    "\"": "''"
    '\“': "''"
    '\”': "''"
    '[\*]': ✶
    '[\?]': ？
    #elipses are a bit annoying but this way avoids ending filenames with "."
    '[\.]{3}$': …
    #0702 SYRIAC SUBLINEAR FULL STOP
    #this might cause issues. looks like it can activate right-to-left text mode (further testing needed)
    '^\.': ܂
    #hopefully exclude DEL ␡ from the next Regex
    '␡': '␡'
    #control characters including Delete (DEL) ␡, see previous rule.
    #should just exclude '[\x00-\x1f]'.
    #commented out because it interpreted the end of every filename before the extension as a
    #control character. maybe this is because of "end of text" (U+0003)?
    #'[\x00-\x1f]': _

#"You can now customize the character substituted for path separators (e.g., /) in filenames via path_sep_replace. The default is an underscore. Use this setting with caution."
#do this for replacing "/" in paths, i.e., in album titles
#one would think this also makes the path seperator change from "/" but I have not found this to be the case. No issues on Windows thus far.
path_sep_replace: '⧸'

#changed blue and turquoise to darkblue and blue due to poor readability of turquoise on black
#Available colors: black, darkred, darkgreen, brown (darkyellow), darkblue, purple (darkmagenta),
# teal (darkcyan), lightgray, darkgray, red, green, yellow, blue, fuchsia (magenta), turquoise (cyan), white
#I still have not found a color scheme I really like for all this
ui:
    color: yes
    colors:
        text_success: green
        text_warning: yellow
        text_error: red
        text_highlight: magenta
        text_highlight_minor: brown
        action_default: cyan
        action: green
        
#avoid conflicts with existing files like "cover.jpg" "front.jpg" etc.
art_filename: 'covauto'

fetchart:
    #uses art_filename (see above)
    #Pick only trusted album art by ignoring filenames that do not contain one of the keywords in cover_names. Default: no.
    #does this do anything if we are skipping "filesystem" next line?
    cautious: yes
    #skip filesystem; it causes conflicts (hard stops in beets import) when used alongside copyartifacts
    #some of the latter items require API keys which are not configured. as such, they will not work (harmlessly fail) if you just use this config as-is 
    sources: coverart amazon albumart wikipedia google fanarttv

#posthumous not yet a possible distinguisher (something I want in the future)
# https://github.com/beetbox/beets/issues/2338

album_fields:
    alb_promo_boot: |
        #official, promo, bootleg, and pseudo-release. we only note the middle two. https://musicbrainz.org/doc/Release#Status
        #speedup, official is most common
        if albumstatus == "Official":
            return ''
        elif 'promotion' in albumstatus:
            return 'Promo'
        elif 'bootleg' in albumstatus:
            return 'Bootleg'
        else:
            return ''
    alb_exotic_type: |
        #no special noting of albums, EPs, and soundtracks
        if albumtype in {'album', 'ep', 'soundtrack'}:
           return ''
        #special case for proper spacing and caps
        elif 'spokenword' in albumtype:
           return 'Spoken Word'
        else:
           return str.title(albumtype)
    alb_subset_bitrate: |
        #bitrate in kbps that divides between two courses of action
        #does not check every track, but should be a speedup on very large albums (multidisc compilations)
        #for my purposes, don't really need bitrate, just a ballpark
        #change as needed; this treats >150kbps lossy the same as it does FLAC. >321 would make it just FLAC and other high-bitrate formats.
        #320 oddly enough doesn't correctly categorize 320kbps MP3 as being <321 kbps. Try 321?
        br_threshhold = 150
        #dunno where all the beets slowness comes from. this may help or may do nothing
        #set to a very high number (ex. 9999) to check every track
        #would be nice to check how much of a performance boost we get
        max_tracks_to_check = 10
        def sample_tracks(tracks):
            #reproducible randomness for debugging. should be excluded for optimal randomness from album to album.
            #otherwise, any album with same number of tracks will get same sample of track numbers, I think
            from random import seed, sample
            seed(25)
            num_items = len(tracks)
            sample_size = min(max_tracks_to_check, num_items)
            test_tracks = sample(tracks, sample_size)
            return(test_tracks)
        test_tracks = sample_tracks(items)
        sample_size = len(test_tracks)
        total = 0
        for item in test_tracks:
            total += item.bitrate
        album_br_bits_ps = total / sample_size
        #base-10 vs. base-2 debate? seemingly 1000:
        # https://hydrogenaud.io/index.php/topic,12633.0.html
        album_br_kbps = album_br_bits_ps / 1000
        #I don't care once the audio is "transparent" - indistinguishable from FLAC
        #so return an empty tag in this case
        if album_br_kbps > br_threshhold:
            return ''
        #only calculate format tag if we need it
        else:
            #return Opus, MP3, "Mixed", etc.
            #uses same test_tracks from earlier sample
            alb_format = test_tracks[0].format
            for item in test_tracks[1:(sample_size-1)]:
                if item.format != alb_format:
                    alb_format = 'Mixed'
                    #Stop looking at items once we know the tracks are not 100% a single format. i.e., once they are "mixed"
                    return str(int(album_br_kbps)) + 'kbps ' + str(alb_format)
            return str(int(album_br_kbps)) + 'kbps ' + str(alb_format)
    alb_title: |
        #convert allcaps titles to title case, while leaving other titles alone
        s_alb = str(album)
        if s_alb.isupper:
            #any artists who have albums you don't want to change
            #could also be modified to ignore specific albums, and so on. see 'beet fields' from the command line
            allowed_artists = ['573fd3e2-3f61-4329-a6c1-89e20620b0b9']
            if mb_albumartistid not in allowed_artists:
                from titlecase import titlecase
                return titlecase(s_alb)
        return album
item_fields:
    i_disc_layer: |
        #do nothing for single-disc releases
        if disctotal > 1:
            if disc != '':
                str_disc = str(disc)
                #pad based on length of highest disc number.
                #ex. if total discs = 2 digits, pad 1 zero for discs 1-9 (01-09)
                legth_to_pad_to = len(str(disctotal))
                return str_disc.zfill(legth_to_pad_to)
        return ''
    i_cust_catalog: |
        def cust_channels():
            if channels == 2:
                #I don't care about stereo sound because of how common it is
                return ''
            elif channels == 1:
                return 'Mono'
            elif channels == 4:
                return 'Quad'
            elif 5 <= channels <= 6:
                return 'Surround'
            else:
                return str(channels) + 'ch'
        #omit formats that are common, or that have the same data as a normal CD
        #nothing special about CD / Web (it's very common on a computer) so just omit it
        #Blu-spec is the same as CD. see
        #https://www.cnet.com/news/blu-spec-cd-format-what-is-it-and-should-you-even-care/
        #Enhanced CD is the same audio-wise as a CD. It just contains data too.
        #CDDA = Redbook = normal CD
        #SHM-CD = conforms to CD spec, data will be the same #https://www.amazon.com/SHM-CD-Super-High-Material-CD/forum/Fx1IPUKC4NE0UXH/Tx112UYCFCW3FPU/1/ref=cm_cd_et_md_pl?_encoding=UTF8&asin=B000G73U5Y&cdMsgID=Mx2Q7J55H8UK0XR&cdMsgNo=6&cdSort=oldest#Mx2Q7J55H8UK0XR
        media_types_to_omit = ['Digital Media', 'CD', 'Blu-spec CD', 'Enhanced CD', 'CDDA', 'SHM-CD', '']
        
        def item_cust_media():
            #see https://musicbrainz.org/doc/Release/Format
            if media in media_types_to_omit:
                return ''
            #combine hybrid SACD with SACD, see https://en.wikipedia.org/wiki/Super_Audio_CD#Technology
            elif 'SACD' in media:
                return 'SACD'
            #combine all vinyl types into just "Vinyl"
            elif 'Vinyl' in media:
                #https://en.wikipedia.org/wiki/VinylDisc
                if media == 'VinylDisc':
                    return 'VinylDisc'
                else:
                    return 'Vinyl'
            elif 'DVD' in media:
                if media == 'HD-DVD':
                    return 'HD-DVD'
                else:
                    return 'DVD'
            elif "USB" in media:
                return 'USB'
            #DualDisc contains a DVD side and a CD side. this classification will be incorrect if you rip the CD side
            #but why would you do that?
            elif media == "DualDisc":
                return "DVD"
            else:
                return media
            
        def reissue():
            if year > original_year:
                if original_year > 0:
                    return str(year)
            return ''
        
        result = ''
        
        if reissue() != '':
            result = reissue()
            
        #faster lookup than cust_channels
        if channels != 2:
            if result != '':
                result = result + " " + cust_channels()
            else:
                result = cust_channels()
                
        #faster lookup
        if media not in media_types_to_omit:
            if result != '':
                result = result + ' ' + item_cust_media()
            else:
                result = item_cust_media()
        if result != '':
            return ' (' + result + ')'
        return result
